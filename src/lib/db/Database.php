<?php
/*
 * Synopsy PHP Framework (c) by Webdesign Studio s.r.o.
 * 
 * Synopsy PHP Framework is licensed under a
 * Creative Commons Attribution 4.0 International License.
 *
 * You should have received a copy of the license along with this
 * work. If not, see <http://creativecommons.org/licenses/by/4.0/>.
 *
 * Any files in this application that are NOT marked with this disclaimer are
 * not part of the framework's open-source implementation, the CC 4.0 licence
 * does not apply to them and are protected by standard copyright laws!
 */

namespace Synopsy\Db;

use Synopsy\Config\Config;
use Synopsy\Exceptions\SynopsyException;

/**
 * Class handling opening, storing and closing mysqli connections with database
 * server.
 * 
 * @author Michal Sukupčák <sukupcak@webdesign-studio.sk>
 */
final class Database {
    
    /**
     * Singleton Database instance
     * 
     * @var Database
     */
    private static $instance = null;
        
    /**
     * Singleton constructor.
     * 
     */
    private function __Construct() {}
 
    /**
     * Opens mysqli connection to database.
     * 
     * @throws SynopsyException
     */
    public static function connect() {
        $databaseConfig = Config::getDatabase();
        $databaseClass = $databaseConfig['class'];
        $databaseFile = SRC.'lib/db/databases/'.$databaseClass.'.php';
        if (!file_exists($databaseFile)) {
            throw new SynopsyException("Database class file '$databaseFile' doesn't exist!");
        }
        require_once($databaseFile);
        $c = "\Synopsy\Db\Databases\\$databaseClass";
        self::$instance = new $c();
        if (!self::$instance instanceof DatabaseInterface) {
            throw new SynopsyException("Database class '$databaseClass' doesn't implement DatabaseInterface interface!");
        }	
        self::$instance->connect($databaseConfig);
    }
 
    /**
     * Closes mysqli connection with database.
     * 
     */
    public static function disconnect() {
	self::$instance->disconnect();
    }
        
    /**
     * Executes supplied SQL query.
     * 
     * @param Query $query
     * @param Boolean $return
     * @return MySQLi_result
     * @throws DatabaseException
     */
    public static function executeQuery($query,$return=false) {
        return self::$instance->executeQuery($query,$return);
    }
    
    /**
     * Returns associative array of DB select results.
     * 
     * 
     * @param MySQLi_result $result
     * @return type
     * @throws DatabaseException
     */
    public static function fetchAll($result=null) {
	return self::$instance->fetchAll($result);
	
    }
    
    /**
     * Returns array of element's parameters of DB select result.
     * 
     * 
     * @param MySQLi_result $result
     * @return type
     * @throws DatabaseException
     */
    public static function fetchOne($result=null) {
	return self::$instance->fetchOne($result);
    }
    
    
    /**
     * Returns newest AUTO_INCREMENT value generated by INSERT SQL query.
     * 
     * @return Integer
     */
    public static function insertId() {
	return self::$instance->insertId();
    }
    
    /**
     * Returns number of rows affected by last SQL query.
     * 
     * @return Integer
     */
    public static function affectedRows() {
	return self::$instance->affectedRows();
    }
    
    /**
     * Determines if last SQL query modified any data in database.
     * 
     * @return Boolean
     */
    public static function changed() {
	return self::$instance->changed();
    }
    
        
    /**
     * Escapes string using mysqli_real_escape_string.
     * 
     * @param String $string
     * @return String
     */
    public static function escape($string) {
	return self::$instance->escape($string);
    }
    
}
